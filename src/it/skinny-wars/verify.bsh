/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.*;
import java.nio.file.attribute.FileTime;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.jar.*;
import java.util.regex.*;
import java.util.zip.ZipEntry;

File jarFile = new File( basedir, "ear-module/target/ear-module-1.0/org.apache.maven.its.ear.skinnywars-war-module-1.0.war" );
System.out.println( "Checking for existence of " + jarFile );
if ( !jarFile.isFile() )
{
    throw new IllegalStateException( "Missing file: " + jarFile );
}

JarFile jar = new JarFile( jarFile );

String[] includedEntries = {
    "WEB-INF/web.xml",
    "META-INF/MANIFEST.MF"
};

// Refer to org.apache.maven.archiver.MavenArchiver.parseOutputTimestamp
DateFormat entryDateFormat = new SimpleDateFormat( "yyyy-MM-dd'T'HH:mm:ssXXX" );
Date notNormalizedExpectedEntryDate = entryDateFormat.parse( "2020-05-01T12:12:12Z" );
// Refer to org.codehaus.plexus.archiver.zip.AbstractZipArchiver.normalizeLastModifiedDate
// and org.codehaus.plexus.archiver.zip.AbstractZipArchiver.dosToJavaTime
Calendar calendar = Calendar.getInstance();
FileTime expectedEntryTimestamp = FileTime.fromMillis( notNormalizedExpectedEntryDate.getTime()
    - calendar.get( Calendar.ZONE_OFFSET ) - calendar.get( Calendar.DST_OFFSET ) );

for ( String included : includedEntries )
{
    System.out.println( "Checking for included archive entry " + included );
    ZipEntry jarEntry = jar.getEntry( included );
    if ( jarEntry == null )
    {
        throw new IllegalStateException( "Missing WAR entry: " + included );
    }
    FileTime creationTime = jarEntry.getCreationTime();
    if ( creationTime != null && !creationTime.equals(expectedEntryTimestamp) )
    {
        throw new IllegalStateException( "Invalid creation time: " + creationTime
            + " of WAR entry: " + included
            + ", expected: " + expectedEntryTimestamp );
    }
    FileTime lastAccessTime = jarEntry.getLastAccessTime();
    if ( lastAccessTime != null && !lastAccessTime.equals(expectedEntryTimestamp) )
    {
        throw new IllegalStateException( "Invalid last access time: " + lastAccessTime
            + " of WAR entry: " + included
            + ", expected: " + expectedEntryTimestamp );
    }
    FileTime lastModifiedTime = jarEntry.getLastModifiedTime();
    if ( lastModifiedTime == null || !lastModifiedTime.equals(expectedEntryTimestamp) )
    {
        throw new IllegalStateException( "Invalid last modified time: " + lastModifiedTime
            + " of WAR entry: " + included
            + ", expected: " + expectedEntryTimestamp );
    }
}

Manifest manifest = jar.getManifest();
String manifestClassPath = manifest.getMainAttributes().getValue("Class-Path");
if ( !manifestClassPath.equals("commons-lang-commons-lang-2.5.jar") )
{
    throw new IllegalStateException( "Missing entry in war MANIFEST.MF: commons-lang-commons-lang-2.5.jar");
}

String[] excludedEntries = {
    "WEB-INF/lib/commons-lang-commons-lang-2.5.jar"
};
for ( String excluded : excludedEntries )
{
    System.out.println( "Checking for excluded artifact " + excluded );
    if ( jar.getEntry( excluded ) != null )
    {
        throw new IllegalStateException( "Archive entry should be excluded: " + excluded );
    }
}

jar.close();


File jarFile = new File( basedir, "war-module/target/war-module-1.0.war" );
System.out.println( "Checking for existence of " + jarFile );
if ( !jarFile.isFile() )
{
    throw new IllegalStateException( "Missing file: " + jarFile );
}

JarFile jar = new JarFile( jarFile );

String[] includedEntries = {
    "WEB-INF/web.xml",
    "META-INF/MANIFEST.MF",
    "WEB-INF/lib/commons-lang-2.5.jar"
};
for ( String included : includedEntries )
{
    System.out.println( "Checking for included archive entry " + included );
    if ( jar.getEntry( included ) == null )
    {
        throw new IllegalStateException( "Missing archive entry: " + included );
    }
}

jar.close();

return true;
